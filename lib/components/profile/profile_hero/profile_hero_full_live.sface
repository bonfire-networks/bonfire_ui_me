<section data-id="profile_hero" class="relative">
  <div>
    {!-- TODO: put this logic in `update` fn instead? --}
    {#case {Media.avatar_url(@user), Media.banner_url(@user)}}
      {#match {avatar_url, banner_url}}
        {#case Media.maybe_dominant_color(id(@user), avatar_url, banner_url)}
          {#match color}
            {!-- {#if Settings.get([Bonfire.UI.Me.ProfileHeroFullLive, :background], false, @__context__) or
                @character_type != :user} --}
            <div
              data-id="hero_background"
              class="aspect-[4/3] w-full h-[180px] relative bg-base-100 border-b border-base-content/10 relative bg-center mt-0 bg-cover bg-no-repeat mb-3"
              style={if not is_binary(color),
                do: "background-image: url('#{banner_url}')",
                else: "background-color: #{color}"}
            >
              {!-- <Bonfire.UI.Common.BackButtonLive class="btn absolute left-3 top-3 btn-circle" /> --}
              <button
                class="btn absolute left-3 top-safe lg:top-3 btn-circle btn-soft btn-sm"
                onclick="history.length > 1 ? history.back() : window.location.href = '/'"
              ><#Icon iconify="ph:arrow-left-duotone" class="w-5 h-5 text-primary" /></button>
              <div class="absolute top-safe lg:top-3 right-3">
                <Bonfire.UI.Me.HeroMoreActionsLive
                  character_type={@character_type}
                  ghosted_instance_wide?={@ghosted_instance_wide?}
                  silenced_instance_wide?={@silenced_instance_wide?}
                  ghosted?={@ghosted?}
                  silenced?={@silenced?}
                  boundary_preset={@boundary_preset}
                  user={@user}
                  members={@members}
                  moderators={@moderators}
                  permalink={e(@user, :character, :peered, :canonical_uri, nil) || URIs.canonical_url(@user)}
                />
              </div>
              {#case @follows_me}
                {#match Bonfire.Data.Social.Request}
                  <p
                    data-role="follows_you"
                    class="absolute right-3 bottom-3 px-3 p-1 rounded-lg bg-neutral/70 backdrop-blur-sm text-neutral-content text-sm"
                  >{l("Requested to follow you")}

                    <button
                      :on-click="Bonfire.Social.Graph.Follows:accept"
                      phx-value-user_id={id(@user)}
                      type="button"
                      class="normal-case border !border-primary/30 btn btn-sm btn-primary ml-2"
                    >
                      {l("Accept")}
                    </button>
                  </p>
                {#match follow when follow in [Bonfire.Data.Social.Follow, true]}
                  <p
                    data-role="follows_you"
                    class="absolute right-3 bottom-3 px-3 p-1 rounded-lg bg-neutral/70 backdrop-blur-sm text-neutral-content text-sm"
                  >{l("Follows you")}</p>
                {#match _}
              {/case}
            </div>

            <div data-id="hero_data" class="px-4">
              <div class="w-full gap-2">
                <div class="flex flex-col lg:items-start gap-2">
                  <div class="flex justify-between items-center w-full">
                    {#if @character_type == :user and
                        !Settings.get([Bonfire.UI.Common.AvatarLive, :hide_avatars], false, @__context__)}
                      <Bonfire.UI.Common.AvatarLive
                        parent_id="profile-hero"
                        class="inline-block object-cover w-24 h-24 md:mx-0 rounded-full -mt-14"
                        user_id={id(@user)}
                        fallback_class="w-24 h-24"
                        src={avatar_url}
                      />
                      {!-- NOTE: removed border as it looks a bit strange when around smaller avatars, such as the generated animal ones: border-4 border-base-100 --}
                    {/if}

                    <div class="flex items-center gap-3" data-id="profile_main_actions">
                      {#if current_user_id(@__context__) == id(@user)}
                        <LinkLive
                          to={~p"/settings/user/profile"}
                          class="btn hidden lg:flex btn-soft btn-primary btn-circle"
                        >
                          <#Icon iconify="ph:gear-six-duotone" class="w-4 h-4" />
                          <span class="sr-only">{l("Edit profile")}</span>
                        </LinkLive>
                      {/if}

                      {#if current_user_id(@__context__) != id(@user)}
                        <StatelessComponent
                          :if={@character_type == :user and current_user_id(@__context__)}
                          module={maybe_component(Bonfire.UI.Boundaries.AddToCircleLive, @__context__)}
                          user_id={id(@user)}
                          parent_id="profile_hero"
                          as_icon
                        />

                        {#if (@ghosted_instance_wide? == true && @silenced_instance_wide? == true) or
                            (@ghosted? == true && @silenced? == true)}
                          <button disabled class="font-semibold flex-1 px-6 normal-case rounded btn btn-disabled">
                            {l("Blocked")}
                          </button>
                        {#else}
                          {#case @character_type}
                            {#match :group}
                              <div class="flex items-center flex-1 gap-2" data-role="follow_wrapper">
                                <StatefulComponent
                                  module={maybe_component(Bonfire.UI.Social.Graph.FollowButtonLive, @__context__)}
                                  :if={(not is_nil(e(@user, :character, nil)) and e(@boundary_preset, "open", nil)) ||
                                    e(@boundary_preset, "visible", nil) || Boundaries.can?(@__context__, :follow, @user)}
                                  id={ComponentID.new(Bonfire.UI.Social.Graph.FollowButtonLive, id(@user), __MODULE__)}
                                  object_id={id(@user)}
                                  object={@user}
                                  follows_me={@follows_me}
                                  path={path(@user)}
                                  hide_icon
                                  class="font-semibold !h-[34px] flex-1 btn-sm px-6 normal-case btn w-full btn-neutral"
                                  verb={if e(@user, :type, nil) == :group,
                                    do: if(e(@boundary_preset, "open", nil), do: l("Join"), else: l("Request to join"))}
                                  verb_undo={l("Leave")}
                                  verb_already={l("Joined")}
                                  disabled={Enums.ids(current_user(@__context__)) == Enums.ids(@moderators) |> debug("m111")}
                                >
                                  <:if_followed>
                                    <Bonfire.UI.Common.SmartInputButtonLive
                                      :if={current_user_id(@__context__)}
                                      prompt={l("Post")}
                                      smart_input_opts={%{
                                        context_id: id(@user),
                                        mentions: [id(@user)],
                                        to_boundaries: set_clone_context(@boundary_preset || @user),
                                        to_circles: [
                                          %{
                                            (ed(@user, :profile, :name, nil) || ed(@user, :character, :username, l("someone"))) =>
                                              id(@user)
                                          }
                                        ]
                                      }}
                                      icon="mdi:pencil"
                                      class="flex btn btn-sm flex-1 btn-primary w-full items-center gap-2 normal-case"
                                    />
                                  </:if_followed>
                                </StatefulComponent>
                              </div>
                            {#match _}
                              <div data-role="follow_wrapper" :if={current_user_id(@__context__) != id(@user)}>
                                <StatefulComponent
                                  module={maybe_component(Bonfire.UI.Social.Graph.FollowButtonLive, @__context__)}
                                  id={ComponentID.new(Bonfire.UI.Social.Graph.FollowButtonLive, id(@user), __MODULE__)}
                                  object_id={id(@user)}
                                  object={@user}
                                  follows_me={@follows_me}
                                  path={path(@user)}
                                  hide_icon
                                  class="btn btn-primary btn-soft"
                                />
                              </div>
                          {/case}
                        {/if}
                      {/if}

                      {!-- <button class="btn flex-1 btn-sm btn-outline ">Add to circle</button>
                      <button class="btn btn-sm flex-1 btn-outline ">Follow</button> --}
                      {!-- <Bonfire.UI.Me.ProfileNavLive user={@user} path={@path} selected_tab={@selected_tab} /> --}
                    </div>
                  </div>

                  <div class="flex flex-col flex-1 w-full">
                    <div class="flex justify-between">
                      <div class="flex flex-col flex-1">
                        <div class="flex items-center text-xl font-bold text-base-content">
                          <LinkPatchLive to={~p"/@#{e(@user, :character, :username, nil)}"}>
                            {rich(e(@user, :profile, :name, "Anonymous"))}
                          </LinkPatchLive>
                          <span
                            :if={module_enabled?(Bonfire.Data.SharedUser, @__context__) && e(@user, :shared_user, :label, nil)}
                            class="ml-3 badge badge-sm badge-info badge-outline"
                          >
                            {e(@user, :shared_user, :label, nil)}
                          </span>
                        </div>
                        <div class="flex lg:items-center flex-col lg:flex-row gap-2">
                          <span class="font-normal text-sm text-base-content/60 truncate max-w-[240px]">{Bonfire.Me.Characters.display_username(@user, true)}</span>
                          <span
                            :if={maybe_apply(Bonfire.Me.Accounts, :is_admin?, [@user], fallback_return: nil) == true}
                            class="badge min-h-[1.5rem] text-xs badge-sm rounded-md !border-info/20 badge-outline rounded badge-info"
                          >
                            {l("Admin")}
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="mt-4 flex flex-col pb-4">
                  <Bonfire.UI.Me.ProfileInfoLive
                    ghosted_instance_wide?={@ghosted_instance_wide?}
                    silenced_instance_wide?={@silenced_instance_wide?}
                    ghosted?={@ghosted?}
                    silenced?={@silenced?}
                    character_type={@character_type}
                    boundary_preset={@boundary_preset}
                    user={@user}
                    path={@path}
                    is_local?={@is_local?}
                    selected_tab={@selected_tab}
                    members={@members}
                    moderators={@moderators}
                    aliases={@aliases}
                  />

                  <StatelessComponent
                    module={maybe_component(Bonfire.UI.Boundaries.ProfileBlockedIndicator, @__context__)}
                    object={@user}
                    user={@user}
                    is_local_user={@is_local?}
                    boundary_preset={@boundary_preset}
                    ghosted_instance_wide?={@ghosted_instance_wide?}
                    silenced_instance_wide?={@silenced_instance_wide?}
                    ghosted?={@ghosted?}
                    silenced?={@silenced?}
                  />
                </div>

                {!-- {#if @follows_me}
                  <p class="text-base-content/60 mt-3 text-sm">{"Follows you"}</p>
                {/if} --}
              </div>
            </div>
        {/case}
    {/case}
  </div>
</section>
