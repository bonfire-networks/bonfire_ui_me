<section>
  <#slot {@header} />

  <div class="flex flex-col w-full gap-1">
    <div class="">
      <div :if={@character_type == :user} class="w-full leading-6 prose md:prose-sm prose-p:pt-2">
        {rich(e(@user, :profile, :summary, ""))}
      </div>

      <div :if={@character_type == :user} class="flex items-center w-full my-4 space-x-4">
        {#if Settings.get(:experimental_features_enabled, false, @__context__)}
          <div :if={e(@user, :profile, :location, nil)} class="flex gap-2 items-center">
            <span class="flex">
              <#Icon solid="LocationMarker" class="w-5 h-5 text-base-content/70" />
              <span class="ml-2 text-sm text-base-content/70">
                {e(@user, :profile, :location, "")}
              </span>
            </span>

            {#case Forecastr.forecast(:today, e(@user, :profile, :location, ""),
                units: :metric,
                renderer: Forecastr.Renderer.JSON
              )
              |> debug("weather")}
              {#match {:ok,
                   %{"description" => weather, "id" => weather_id, "temp" => temp, "name" => weather_location}}}
                {!-- 
            TODO: query weather with lat/long when we have them (need to add the ability to fetch by lat/long in Forecastr)
            TODO: also use https://hexdocs.pm/astro to show sunrise/sunset and moon cycles, etc?
            --}
                <div
                  class="flex"
                  title={l("%{weather} in %{location}", weather: weather, location: weather_location)}
                >
                  <Iconify.iconify icon={"meteocons:#{weather_id}"} class="w-5 h-5 text-info" />
                  <!-- <img src={Iconify.prepare("meteocons:#{weather_id}", :img_url)} class="w-4 h-4 text-info" /> -->
                  <span class="text-sm text-base-content/70">{temp}â„ƒ</span>
                </div>
              {#match _}
            {/case}
          </div>
        {/if}

        {#case Settings.get(:experimental_features_enabled, false, @__context__) and
            (is_nil(current_user_id(@__context__)) or current_user_id(@__context__) == id(@user) or
               Bonfire.Social.Graph.graph_distance(current_user(@__context__), @user))}
          {#match false}
            <div />
          {#match true}
            <div />
          {#match nil}
            <progress title={l("Connection score unknown")} class="progress w-32" value="0" max="100" />
          {#match 0}
            <div />
          {#match distance when distance <= 1}
            <progress
              title={l("Connection score: %{distance}", distance: distance)}
              class="progress progress-success w-32"
              value="100"
              max="100"
            />
          {#match distance when distance <= 2}
            <progress
              title={l("Connection score: %{distance}", distance: distance)}
              class="progress progress-success w-32"
              value="80"
              max="100"
            />
          {#match distance when distance <= 3}
            <progress
              title={l("Connection score: %{distance}", distance: distance)}
              class="progress progress-info w-32"
              value="60"
              max="100"
            />
          {#match distance when distance <= 4}
            <progress
              title={l("Connection score: %{distance}", distance: distance)}
              class="progress progress-info w-32"
              value="40"
              max="100"
            />
          {#match distance when distance <= 5}
            <progress
              title={l("Connection score: %{distance}", distance: distance)}
              class="progress progress-warning w-32"
              value="20"
              max="100"
            />
          {#match distance when distance > 5}
            <progress
              title={l("Connection score: %{distance}", distance: distance)}
              class="progress progress-warning w-32"
              value="10"
              max="100"
            />
        {/case}
      </div>

      <div class="flex flex-col rounded-lg bg-base-content/5 divide-y divide-base-content/10">
        <Bonfire.UI.Me.ProfileLinksLive user={@user} />

        {!-- <div :if={e(@user, :profile, :website, nil)} class="flex  mt-4 items-center">
        {#case Bonfire.Files.FaviconStore.favicon_url(e(@user, :profile, :website, nil))}
          {#match image when is_binary(image)}
            <img
              src={image}
              class="w-4 h-4 text-base-content/70"
              onerror="this.classList.add('iconify'); this.setAttribute('iconify','heroicons-solid:external-link')"
            />
          {#match _}
            <#Icon solid="ExternalLink" class="w-5 h-5 text-base-content/70" />
        {/case}

        <a
          href={"#{e(@user, :profile, :website, "")}"}
          target="blank"
          class="ml-2 text-sm link link-hover text-base-content/70"
        >
          {display_url(e(@user, :profile, :website, ""))}
        </a>
      </div> --}
      </div>
    </div>
    <div>
    </div>

    {!-- <div
    :if={@character_type == :user and extension_enabled?(:bonfire_ui_social_graph, @__context__)}
    class="flex items-center gap-6"
  >
    <LinkPatchLive
      class="flex items-center"
      to={"/" <> @path <> e(@user, :character, :username, "") <> "/followers"}
    >
      <span class="text-sm text-base-content/70 font-medium">
        {l("Followed")}
      </span>
    </LinkPatchLive>
    <LinkPatchLive
      class="flex items-center"
      to={"/" <> @path <> e(@user, :character, :username, "") <> "/followers"}
    >
      <span class="text-sm text-base-content/70 font-medium">
        {l("Followers")}
      </span>
    </LinkPatchLive>
  </div> --}
  </div>
</section>