<div class="flex flex-col w-full gap-1 mt-3">
  <div class="flex items-start w-full justify-between">
    <div class="flex flex-col">
      <div class="flex items-center text-xl font-bold text-base-content">
        <LivePatch to={~p"/@#{e(@user, :character, :username, nil)}"}>
          {e(@user, :profile, :name, "Anonymous")}
        </LivePatch>
        <span
          :if={module_enabled?(Bonfire.Data.SharedUser, @__context__) && e(@user, :shared_user, :label, nil)}
          class="ml-3 badge badge-sm badge-info badge-outline"
        >
          {e(@user, :shared_user, :label, "")}
        </span>
      </div>
      <div class="flex items-center">
        <span class="font-normal text-sm text-base-content/70">{Bonfire.Me.Characters.display_username(@user, true)}</span>
      </div>
      <span
        :if={maybe_apply(Bonfire.Me.Accounts, :is_admin?, @user) == true}
        class="badge min-h-[1.75rem] rounded-md !border-info/30 badge-outline mt-2 rounded badge-info"
      >
        {l("Admin")}
      </span>
    </div>

    <div
      :if={Settings.get([Bonfire.UI.Common.AvatarLive, :hide_avatars], false, @__context__)}
      class="mt-3 mr-6 flex items-center justify-between"
    >
      <Bonfire.UI.Me.HeroMoreActionsLive
        ghosted_instance_wide?={@ghosted_instance_wide?}
        silenced_instance_wide?={@silenced_instance_wide?}
        ghosted?={@ghosted?}
        silenced?={@silenced?}
        character_type={@character_type}
        boundary_preset={@boundary_preset}
        user={@user}
        members={@members}
        moderators={@moderators}
      />
    </div>
  </div>

  <div class="">
    <div :if={@character_type == :user} class="w-full leading-6 prose md:prose-sm prose-p:pt-2">
      {rich(e(@user, :profile, :summary, ""))}
    </div>

    <div :if={@character_type == :user} class="flex items-center w-full space-x-4">
      <div :if={e(@user, :profile, :location, nil)} class="flex mt-4 items-center">
        <#Icon solid="LocationMarker" class="w-5 h-5 text-base-content/70" />
        <span class="ml-2 text-sm text-base-content/70">
          {e(@user, :profile, :location, "")}
        </span>

        {#case Forecastr.forecast(:today, e(@user, :profile, :location, ""),
            units: :metric,
            renderer: Forecastr.Renderer.JSON
          )
          |> debug("weather")}
          {#match {:ok,
               %{"description" => weather, "id" => weather_id, "temp" => temp, "name" => weather_location}}}
            {!-- 
            TODO: query weather with lat/long when we have them (need to add the ability to fetch by lat/long in Forecastr)
            TODO: also use https://hexdocs.pm/astro to show sunrise/sunset and moon cycles, etc?
            --}
            <div
              class="badge ml-2 badge-outline min-h-[1.75rem] !border-base-content/30"
              title={l("%{weather} in %{location}", weather: weather, location: weather_location)}
            >
              <Iconify.iconify icon={"meteocons:#{weather_id}"} class="w-5 h-5 text-info" />
              <!-- <img src={Iconify.prepare("meteocons:#{weather_id}", :img_url)} class="w-4 h-4 text-info" /> -->
              <span class="text-xs">{temp}â„ƒ</span>
            </div>
          {#match _}
        {/case}
      </div>
    </div>

    <div class="mt-4 flex flex-col rounded bg-base-200 divide-y divide-base-content/10">
      <Bonfire.UI.Me.ProfileLinksLive user={@user} />

      {!-- <div :if={e(@user, :profile, :website, nil)} class="flex  mt-4 items-center">
        {#case Bonfire.Files.FaviconStore.favicon_url(e(@user, :profile, :website, nil))}
          {#match image when is_binary(image)}
            <img
              src={image}
              class="w-4 h-4 text-base-content/70"
              onerror="this.classList.add('iconify'); this.setAttribute('iconify','heroicons-solid:external-link')"
            />
          {#match _}
            <#Icon solid="ExternalLink" class="w-5 h-5 text-base-content/70" />
        {/case}

        <a
          href={"#{e(@user, :profile, :website, "")}"}
          target="blank"
          class="ml-2 text-sm link link-hover text-base-content/70"
        >
          {display_url(e(@user, :profile, :website, ""))}
        </a>
      </div> --}
    </div>

    {!-- :if={e(@user, :profile, :location, nil) || e(@user, :profile, :website, nil)} --}

    <div :if={@character_type != :user} class="mt-3 flex items-center justify-between">
      <Bonfire.UI.Me.HeroMoreActionsLive
        ghosted_instance_wide?={@ghosted_instance_wide?}
        silenced_instance_wide?={@silenced_instance_wide?}
        ghosted?={@ghosted?}
        silenced?={@silenced?}
        character_type={@character_type}
        boundary_preset={@boundary_preset}
        user={@user}
        members={@members}
        moderators={@moderators}
      />
    </div>
  </div>
  <div>
  </div>
  {#if @ghosted_instance_wide? == nil and
      @silenced_instance_wide? == nil and
      @ghosted? == nil and
      @silenced? == nil}
    <div />
  {#else}
    <div class="">
      {#if @ghosted_instance_wide? or @silenced_instance_wide?}
        <div :if={@ghosted_instance_wide? and @silenced_instance_wide?} class="flex items-baseline gap-2">
          <div class="prose prose-sm text-sm font-normal text-base-content/70">{l("Admins have blocked this user.")}</div>
          <div :if={Bonfire.Boundaries.can?(@__context__, :block, :instance)}>
            <Bonfire.Boundaries.Web.BlockButtonLive
              object={@user}
              type="block"
              only_admin
              label={e(@user, :profile, :name, l("this user"))}
              open_btn_label={l("Unblock instance-wide")}
              parent_id={"user-#{id(@user)}"}
              class="link link-error text-sm"
            />
          </div>
        </div>
        <div
          :if={@ghosted_instance_wide? and !@silenced_instance_wide?}
          class="flex items-baseline gap-2"
        >
          <div class="prose prose-sm text-sm font-normal text-base-content/70">{l("Admins have ghosted this user.")}</div>
          <div :if={Bonfire.Boundaries.can?(@__context__, :block, :instance)}>
            <Bonfire.Boundaries.Web.BlockButtonLive
              object={@user}
              type="ghost"
              only_admin
              label={e(@user, :profile, :name, l("this user"))}
              open_btn_label={l("Unghost instance-wide")}
              parent_id={"user-#{id(@user)}"}
              class="link link-primary text-sm"
            />
          </div>
        </div>
        <div
          :if={!@ghosted_instance_wide? and @silenced_instance_wide?}
          class="flex items-baseline gap-2"
        >
          <div class="prose prose-sm text-sm font-normal text-base-content/70">{l("Admins have silenced this user.")}</div>
          <div :if={Bonfire.Boundaries.can?(@__context__, :block, :instance)}>
            <Bonfire.Boundaries.Web.BlockButtonLive
              object={@user}
              type="silence"
              only_admin
              title={l("Unsilence %{user} instance-wide", user: e(@user, :profile, :name, ""))}
              label={e(@user, :profile, :name, l("this user"))}
              open_btn_label={l("Unsilence instance-wide")}
              parent_id={"user-#{id(@user)}"}
              class="link link-primary text-sm"
            />
          </div>
        </div>
      {#elseif @ghosted? != nil or @silenced? != nil}
        <div :if={@ghosted? and @silenced?} class="flex items-baseline gap-2">
          <div class="prose prose-sm text-sm font-normal text-base-content/70">{l("You have blocked this user.")}
          </div>
          <div>
            <Bonfire.Boundaries.Web.BlockButtonLive
              object={@user}
              type="block"
              only_user
              label={e(@user, :profile, :name, l("this user"))}
              open_btn_label={l("Unblock")}
              parent_id={"user-#{id(@user)}"}
              class="link link-error text-sm"
            />
          </div>
        </div>
        <div :if={!@ghosted? and @silenced?} class="flex items-baseline gap-2">
          <div class="prose prose-sm text-sm font-normal text-base-content/70">{l("You have silenced this user.")}
          </div>
          <div>
            <Bonfire.Boundaries.Web.BlockButtonLive
              object={@user}
              type="silence"
              only_user
              title={l("Unsilence %{user}", user: e(@user, :profile, :name, ""))}
              label={e(@user, :profile, :name, l("this user"))}
              open_btn_label={l("Unsilence")}
              parent_id={"user-#{id(@user)}"}
              class="link link-primary text-sm"
            />
          </div>
        </div>
        <div :if={@ghosted? and !@silenced?} class="flex items-baseline gap-2">
          <div class="prose prose-sm text-sm font-normal text-base-content/70">{l("You have ghosted this user.")}
          </div>
          <div>
            <Bonfire.Boundaries.Web.BlockButtonLive
              object={@user}
              type="ghost"
              only_user
              label={e(@user, :profile, :name, l("this user"))}
              open_btn_label={l("Unghost")}
              parent_id={"user-#{id(@user)}"}
              class="link link-primary text-sm"
            />
          </div>
          {!-- <button class="link link-primary link-sm">{l "Unghost"}</button> --}
        </div>
      {/if}
    </div>
  {/if}

  <div
    :if={@character_type == :user and extension_enabled?(:bonfire_ui_social_graph, @__context__)}
    class="flex items-center gap-6"
  >
    <LivePatch
      class="flex items-center"
      to={"/" <> @path <> e(@user, :character, :username, "") <> "/followers"}
    >
      <span class="text-sm text-base-content/70 font-medium">
        {!-- <b class="text-base-content/100">39</b> --}
        {l("Followed")}
      </span>
    </LivePatch>
    <LivePatch
      class="flex items-center"
      to={"/" <> @path <> e(@user, :character, :username, "") <> "/followers"}
    >
      <span class="text-sm text-base-content/70 font-medium">
        {!-- <b class="text-base-content/100">39</b> --}
        {l("Followers")}
      </span>
    </LivePatch>
  </div>
</div>