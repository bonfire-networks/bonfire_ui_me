

<div 
  x-data="{ active: 1 }" >
  
  {#if Bonfire.Me.Settings.get([:bonfire, :terms, :conduct], nil)}
  <div x-data="{
      id: 1,
      get expanded() {
          return this.active === this.id
      },
      set expanded(value) {
          this.active = value ? this.id : null
      },
    }" 
    role="region" 
    class="border-b bg-base-200 border-base-content/10">
    <button
      x-on:click="expanded = !expanded"
      :aria-expanded="expanded"
      class="flex items-center justify-between w-full px-6 py-2 text-lg font-bold"
    >
      <span>{l "Read our Code of Conduct"}</span>
      <span x-show="expanded" aria-hidden="true" class="ml-4">&minus;</span>
      <span x-show="!expanded" aria-hidden="true" class="ml-4">&plus;</span>
    </button>

    <div x-show="expanded" x-collapse>
      <div class="px-6 pb-4">
      {#case Config.get([:bonfire, :terms, :conduct], nil)}
        {#match terms when is_binary(terms)}
        <div class="prose-sm prose">
          {rich terms}
        </div>
        {#match _}
      {/case}
      </div>  
    </div>
  </div>
  {/if} 
  {#if Bonfire.Me.Settings.get([:bonfire, :terms, :privacy], nil)}
    <div x-data="{
      id: 2,
      get expanded() {
          return this.active === this.id
      },
      set expanded(value) {
          this.active = value ? this.id : null
      },
    }" 
    role="region" 
    class="border-b bg-base-200 border-base-content/10">
      <h2>
        <button
          x-on:click="expanded = !expanded"
          :aria-expanded="expanded"
          class="flex items-center justify-between w-full px-6 py-2 text-lg font-bold"
        >
          <span>{l "Read our privacy policy"}</span>
          <span x-show="expanded" aria-hidden="true" class="ml-4">&minus;</span>
          <span x-show="!expanded" aria-hidden="true" class="ml-4">&plus;</span>
        </button>
      </h2>

      <div x-show="expanded" x-collapse>
        <div class="px-6 pb-4">
          {#case Config.get([:bonfire, :terms, :privacy], nil)}
            {#match terms when is_binary(terms)}
              {rich terms}
            {#match _}
          {/case}
        </div>
      </div>
    </div>
  {/if}

    
</div>

{#if @registered }
<div class="w-full mx-auto mt-4 lg:w-96 md:w-2/3">
  <div class="relative z-10 flex items-center mx-auto rounded-full bg-base-300 w-28 h-28 place-content-center ring-4 ring-base-100">
    <LiveRedirect to={path(Bonfire.Common.Config.get!(:home_page))}>
      <div class="w-24 h-24 bg-center bg-no-repeat bg-contain" style={"background-image: url(#{ Bonfire.Common.Config.get([:ui, :theme, :instance_icon], nil)})"}></div>
    </LiveRedirect>
  </div>
  <div class="rounded shadow-xl bg-base-100 -mt-14">
    <div class="px-6 pt-16 pb-6 mx-auto">
    <div class="flex">
        <div class="flex-shrink-0">
          <Solid.CheckCircleIcon class="w-5 h-5 text-success" />
        </div>
        <div class="ml-3">
          <h3 class="text-sm font-medium text-base-content">{l "Hooray! You are registered"}</h3>
          <div class="mt-2 text-sm text-base-content text-opacity-80" data-id="confirmation_success">
            {#if @registered==:check_email }
              {l "Now we need you to confirm your email address. We've emailed you a link (check your spam folder!). Please click on it to continue."}
            {#else}
              {l "You can now log in."}
            {/if}
          </div>
          <LiveRedirect to={path(Bonfire.Common.Config.get!(:home_page))}>
            <div class="flex items-center">
              <span class="mt-6 text-sm font-bold underline text-base-content">{l "Back to home page"}</span>
            </div>
          </LiveRedirect>
        </div>
      </div>
    </div>
  </div>
</div>
{#else}
  <div class="flex m-3 mb-3 md:m-0">
    <Bonfire.UI.Me.SignupFormLive form={@form} error={@error}/>
  </div>
{/if}
