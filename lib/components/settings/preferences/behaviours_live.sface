<div class="">
  <div class="p-4 text-xl font-bold flex items-center gap-4 border-b border-base-content/10">
    <#Icon iconify="fluent:paint-brush-20-filled" class="w-6 h-6 text-base-content/80" />
    <span>{l("Appearance")}</span>
  </div>

  <div class="divide-y divide-base-content/10">
    <div x-data="{open: false}" class="p-4">
      <div x-on:click="open = !open" class="flex items-center justify-between gap-4 cursor-pointer">
        <div class="flex flex-col gap-1">
          <div class="text-sm font-medium">{l("Theme")}</div>
          <div class="text-sm font-light text-base-content/70">{l("Customise the look and feel")}</div>
        </div>

        <button type="button" x-cloak class="btn btn-circle btn-sm btn-ghost" x-show="open">
          <#Icon iconify="ph:caret-down-duotone" class="w-3 h-3 text-base-content/70" />
        </button>
        <button type="button" class="btn btn-circle btn-sm btn-ghost" x-show="!open">
          <#Icon iconify="ph:caret-up-duotone" class="w-3 h-3 text-base-content/70" />
        </button>
      </div>
      <div x-show="open" x-cloak x-collapse>
        <form data-scope="set_theme" name="settings" phx-change="Bonfire.Common.Settings:set">
          <input name="scope" value={@scope} type="hidden">
          <Bonfire.UI.Common.ChangeThemesLive scope={@scope} />
        </form>
      </div>
    </div>

    <form class="p-4" data-scope="set_font" name="settings" phx-change="Bonfire.Common.Settings:set">
      <label for="set_font" class="sr-only">{l("Set font")}</label>
      <Bonfire.UI.Common.SettingsSelectLive
        id="set_font"
        name={l("Font")}
        description={l("Select the default font for the interface")}
        keys={[:ui, :font_family]}
        options={Settings.get([:ui, :font_families], ["Inter"],
          context: @scoped,
          name: l("Font Families"),
          description: l("Available fonts for the user interface.")
        )}
        scope={@scope}
      />
    </form>

    <div class="p-4">
      <form data-scope="set_language" name="settings" phx-change="Bonfire.Common.Settings:set_locale">
        <label class="flex items-center justify-between gap-4">
          <div class="flex flex-col gap-1">
            <div class="text-sm font-medium">{l("Language")}</div>
            <div class="text-sm font-light text-base-content/70">{l("What language do you want your interface to speak?")}</div>
          </div>

          <input name="scope" value={@scope} type="hidden">
          <div class="max-w-xs  form-control">
            <Bonfire.UI.Common.ChangeLocaleLive
              locale={Settings.get([Bonfire.Common.Localise.Cldr, :default_locale], "en",
                context: @scoped,
                name: l("Default Locale"),
                description: l("The default language locale for the application.")
              )}
              scope={@scope}
            />
          </div>
        </label>
      </form>
    </div>

    <form
      class="p-4"
      data-scope="set_date_format"
      name="settings"
      phx-change="Bonfire.Common.Settings:set"
    >
      <Bonfire.UI.Common.SettingsSelectLive
        name={l("Date format")}
        description={l("Select how to display the date/time of activities")}
        keys={[:ui, :date_time_format]}
        options={Keyword.merge([relative: l("Relative")], DatesTimes.available_formats())}
        scope={@scope}
      />
    </form>

    {!-- <form data-scope="set_composer" phx-change="Bonfire.Common.Settings:set">
      <Bonfire.UI.Common.SettingsToggleLive
        name="Composer"
        description={l("Show the focused composer")}
        keys={[Bonfire.UI.Common.SmartInputContainerLive, :show_focused]}
        scope={@scope}
      />
    </form> --}

    <form data-scope="set_brand" phx-change="Bonfire.Common.Settings:set">
      <Bonfire.UI.Common.SettingsToggleLive
        name="Brand"
        description={l("Show only the instance logo")}
        keys={[Bonfire.UI.Common.LogoLive, :only_logo]}
        scope={@scope}
      />
    </form>

    <form data-scope="set_avatar_shape" phx-change="Bonfire.Common.Settings:set">
      <Bonfire.UI.Common.SettingsToggleLive
        name="Avatar shape"
        description={l("Show square avatars")}
        keys={[Bonfire.UI.Common.AvatarLive, :shape]}
        scope={@scope}
        default_value
      />
    </form>

    {!-- name={l("Missing avatars")} --}
    <form data-scope="set_animal_avatar" phx-change="Bonfire.Common.Settings:set">
      <input name="scope" value={@scope} type="hidden">

      <Bonfire.UI.Common.SettingsToggleLive
        description={l("Show randomly-generated animal avatars for users without a profile picture?")}
        keys={[Bonfire.UI.Common.AvatarLive, :animal_avatars]}
        default_value
        name="Animal avatars"
        scope={@scope}
      />
    </form>

    <form data-scope="set_compact_layout" phx-change="Bonfire.Common.Settings:set">
      <input name="scope" value={@scope} type="hidden">
      <Bonfire.UI.Common.SettingsToggleLive
        name={l("Prefer compact layouts")}
        description={l("Compact layouts are more dense and may show less contents.")}
        keys={[:ui, :compact]}
        scope={@scope}
      />
    </form>

    <form data-scope="set_hide_avatar" phx-change="Bonfire.Common.Settings:set">
      <input name="scope" value={@scope} type="hidden">

      <Bonfire.UI.Common.SettingsToggleLive
        id="set_hide_avatar"
        name={l("Hide avatars")}
        description={l("Hide avatars throughout the app?")}
        keys={[Bonfire.UI.Common.AvatarLive, :hide_avatars]}
        default_value={false}
        scope={@scope}
      />
    </form>

    {!-- <form data-scope="set_hide_actions_on_feed" phx-change="Bonfire.Common.Settings:set">
      <input name="scope" value={@scope} type="hidden">

      <Bonfire.UI.Common.SettingsToggleLive
        name={l("Hide actions on feed activities (eg. reply, boost, etc)")}
        description={l("Hide actions in feeds, and only show them when you hover over an activity?")}
        keys={[Bonfire.UI.Social.Activity.ActionsLive, :feed, :hide_until_hovered]}
        scope={@scope}
      />
    </form> 
    
     <form data-scope="set_hide_actions_on_discussion" phx-change="Bonfire.Common.Settings:set">
      <input name="scope" value={@scope} type="hidden">
      <Bonfire.UI.Common.SettingsToggleLive
        name={l("Hide actions on discussions (eg. reply, boost, etc)")}
        description={l("Hide actions for comments in discussions, and only show them when you hover over an activity?")}
        keys={[Bonfire.UI.Social.Activity.ActionsLive, :thread, :hide_until_hovered]}
        scope={@scope}
      />
    </form> --}
  </div>

  <div class="p-4 text-xl font-bold flex items-center gap-4 border-b border-base-content/10">
    <#Icon iconify="majesticons:list-box" class="w-6 h-6 text-base-content/80" />
    <span>{l("Feeds and Discussions")}</span>
  </div>

  <div class="divide-y divide-base-content/10">
    <div x-data="{open: false}" class="p-4 cursor-pointer">
      <div x-on:click="open = !open" class="flex items-center justify-between gap-4">
        <div class="flex flex-col gap-1">
          <div class="text-sm font-medium">{l("Email notifications")}</div>
          <div class="text-sm font-light text-base-content/70">{l("What activities to receive email notifications for")}</div>
        </div>
        {!-- Alpinejs: If open is true, set x-text to "Expand", otherwise set to "Collapse" --}
        <button type="button" x-cloak class="btn btn-circle btn-sm btn-ghost" x-show="open">
          <#Icon iconify="ph:caret-down-duotone" class="w-3 h-3 text-base-content/70" />
        </button>
        <button type="button" class="btn btn-circle btn-sm btn-ghost" x-show="!open">
          <#Icon iconify="ph:caret-up-duotone" class="w-3 h-3 text-base-content/70" />
        </button>
      </div>
      <div x-show="open" x-cloak x-collapse class="pt-2">
        <StatelessComponent
          module={maybe_component(Bonfire.Me.Social.Settings.EmailNotificationsLive, @__context__)}
          title={l("What activities to receive email notifications for")}
          scope={@scope}
        />
      </div>
    </div>

    {!-- <div class="p-4 cursor-pointer">
      <div class="flex items-center justify-between gap-4">
        <div class="flex flex-col gap-1">
          <div class="text-sm font-medium">{l("Feed activities")}</div>
          <div class="text-sm font-light text-base-content/70">{l("What activities to include in home feeds by default")}</div>
        </div>
      </div>
      <div class="pt-2">
        <StatelessComponent
          module={maybe_component(Bonfire.UI.Social.Settings.MyFeedItemsLive, @__context__)}
          title={l("What activities to include in home feeds by default")}
          scope={@scope}
        />
      </div>
    </div> --}

    {!-- 
     <!-- Commenting because it is overridden by the settings in the dashboard settings -->
     <form
      class="p-4"
      data-scope="set_default_feed"
      name="settings"
      phx-change="Bonfire.Common.Settings:set"
    >
      <label for="set_default_feed" class="sr-only">{l("Set default feed")}</label>
      <Bonfire.UI.Common.SettingsSelectLive
        id="set_default_feed"
        name={l("Default feed")}
        description={l("Select the feed you want to display on the dashboard (When enabled)")}
        keys={[Bonfire.UI.Social.FeedLive, :default_feed]}
        options={if module_enabled?(Bonfire.Social.Pins, @__context__) and
             Bonfire.Common.Config.get(
               [Bonfire.UI.Social.FeedsLive, :curated],
               false
             ) do
          [
            my: l("My Feed"),
            curated: l("Curated"),
            local: l("Local"),
            fediverse: l("Remote")
          ]
        else
          [
            my: l("My Feed"),
            explore: l("All"),
            local: l("Local"),
            fediverse: l("Remote")
          ]
        end}
        scope={@scope}
      />
    </form> --}

    <form data-scope="time_limit" class="p-4" phx-change="Bonfire.Common.Settings:set">
      <label for="set_default_time_limit" class="sr-only">{l("Set default time limit")}</label>
      <Bonfire.UI.Common.SettingsSelectLive
        keys={[Bonfire.UI.Social.FeedLive, :time_limit]}
        options={%{1 => l("Day"), 7 => l("Week"), 30 => l("Month"), 365 => l("Year"), 0 => l("All time")}}
        default_value={nil}
        name={l("Feed time limit")}
        description={l(
          "Select the time limit you want to use by default (can always change in the feed controls options)"
        )}
        scope={@scope}
      />
    </form>

    {!-- <div class="p-4">
  <StatelessComponent
    module={maybe_component(Bonfire.UI.Social.SortItemsLive, @__context__)}
    scope={@scope}
    name={l("Feed default sort")}
    description={l("Select the default sorting options for your feeds (can always change in the feed controls options)")}
  />
  </div> --}

    <div class="p-4 flex flex-col lg:flex-row lg:items-center gap-4 justify-between">
      <div class="flex items-center justify-between gap-4">
        <div class="flex flex-col gap-1">
          <div class="text-sm font-medium">{l("Feed default sort")}</div>
          <div class="text-sm font-light text-base-content/70">{l(
              "Select the default sorting options for your feeds (can always change in the feed controls options)"
            )}</div>
        </div>
      </div>
      <StatelessComponent
        module={maybe_component(Bonfire.UI.Social.SortItemsLive, @__context__)}
        scope={@scope}
      />
    </div>

    <form phx-change="Bonfire.Common.Settings:set">
      <Bonfire.UI.Common.Settings.NumberLive
        scope={@scope}
        name={l("How many items to show in feeds and other lists")}
        keys={[:default_pagination_limit]}
        unit={l("items")}
      />
      {!-- name={l("How many items to show in feeds and other lists (maximum %{number})", number: Config.get(:pagination_hard_max_limit, 500))} --}
    </form>

    {!-- <div x-data="{open: false}" class="p-4 cursor-pointer">
      <div x-on:click="open = !open" class="flex items-center justify-between gap-4">
        <div class="flex flex-col gap-1">
          <div class="text-sm font-medium">{l("Discussions default layout")}</div>
          <div class="text-sm font-light text-base-content/70">{l("Select the default way to view discussions (can always change in the feed controls options)")}</div>
        </div>
        <!-- Alpinejs: If open is true, set x-text to "Expand", otherwise set to "Collapse" -->
        <button type="button" x-cloak class="btn btn-circle btn-sm btn-ghost" x-show="open">
          <#Icon iconify="ph:caret-down-duotone" class="w-3 h-3 text-base-content/70" />
        </button>
        <button type="button" class="btn btn-circle btn-sm btn-ghost" x-show="!open">
          <#Icon iconify="ph:caret-up-duotone" class="w-3 h-3 text-base-content/70" />
        </button>
      </div>
      <div x-show="open" x-cloak x-collapse class="pt-2">
        <form data-scope="set_thread_layout" phx-change="Bonfire.Common.Settings:set">
          <Bonfire.UI.Common.SettingsRadiosLive
            keys={[Bonfire.UI.Social.ThreadLive, :thread_mode]}
            options={[flat: l("Flat"), nested: l("Nested threads")]}
            default_value={:nested}
            scope={@scope}
          />
        </form>
      </div>
    </div> --}
    <form
      class="p-4"
      data-scope="set_thread_layout"
      name="settings"
      phx-change="Bonfire.Common.Settings:set"
    >
      <Bonfire.UI.Common.SettingsSelectLive
        name={l("Discussions default layout")}
        id="thread_default_layout"
        label_name="Set thread layout"
        description={l("Select the default way to view discussions (can always change in the feed controls options)")}
        keys={[Bonfire.UI.Social.ThreadLive, :thread_mode]}
        options={[flat: l("Flat"), nested: l("Nested threads")]}
        scope={@scope}
      />
    </form>

    <form
      class="p-4"
      data-scope="set_thread_sorting"
      name="settings"
      phx-change="Bonfire.Common.Settings:set"
    >
      <Bonfire.UI.Common.SettingsSelectLive
        name={l("Discussions default sort")}
        description={l(
          "Select the default sorting options for viewing discussions (can always change in the feed controls options)"
        )}
        keys={[Bonfire.UI.Social.ThreadLive, :sort_by]}
        id="thread_default_sort"
        label_name="Sort by"
        options={if extension_enabled?(:bonfire_ui_reactions, @__context__),
          do: [
            nil: l("Chronological"),
            latest_reply: l("Surface latest replies"),
            num_replies: l("Amount of replies"),
            num_boosts: l("Amount of boosts"),
            num_likes: l("Amount of likes")
          ],
          else: [
            nil: l("Chronological"),
            latest_reply: l("Surface latest replies"),
            num_replies: l("Amount of replies")
          ]}
        scope={@scope}
      />
    </form>
  </div>

  <div class="p-4 font-bold text-xl flex items-center gap-4 border-b border-base-content/10">
    <#Icon iconify="material-symbols:digital-wellbeing" class="w-6 h-6 text-base-content/80" />
    <span>{l("Wellbeing")}</span>
  </div>

  {!-- <StatelessComponent
    scope={@scope}
    module={maybe_component(Bonfire.UI.Boundaries.DefaultBoundaryLive, @__context__)}
  /> --}
  <div class="divide-y divide-base-content/10">
    <form phx-change="Bonfire.Common.Settings:set">
      <Bonfire.UI.Common.SettingsToggleLive
        name={l("Mark as sensitive media")}
        description={l(
          "Mark all your uploaded media as sensitive by default (you can still mark *as not sensitive* when posting)"
        )}
        keys={[Bonfire.UI.Common.UploadPreviewsLive, :mark_as_sensitive]}
        scope={@scope}
      />
    </form>

    <form phx-change="Bonfire.Common.Settings:set">
      <Bonfire.UI.Common.SettingsToggleLive
        name={l("Hide media")}
        description={l("Blur all media in feeds and discussions (and click to reveal)")}
        keys={[Bonfire.UI.Social.Activity.MediaLive, :hide]}
        scope={@scope}
      />
    </form>

    <div x-data="{open: false}" class="p-4 cursor-pointer">
      <div x-on:click="open = !open" class="flex items-center justify-between gap-4">
        <div class="flex flex-col gap-1">
          <div
            :if={Settings.get([:ui, :infinite_scroll], :preload,
              context: @__context__,
              name: l("Infinite Scrolling"),
              description: l("Enable infinite scrolling in feeds.")
            ) == true}
            class="badge mb-2 !border !border-warning/30 badge-outline badge-warning"
          >{l("Dark Pattern")}</div>
          <div class="text-sm font-medium">{l("Infinite scrolling")}</div>
          <!-- <div class="text-sm font-light text-base-content/70">{l("Infinite scrolling")}</div> -->
        </div>
        {!-- Alpinejs: If open is true, set x-text to "Expand", otherwise set to "Collapse" --}
        <button type="button" x-cloak class="btn btn-circle btn-sm btn-ghost" x-show="open">
          <#Icon iconify="ph:caret-down-duotone" class="w-3 h-3 text-base-content/70" />
        </button>
        <button type="button" class="btn btn-circle btn-sm btn-ghost" x-show="!open">
          <#Icon iconify="ph:caret-up-duotone" class="w-3 h-3 text-base-content/70" />
        </button>
      </div>
      <div x-show="open" x-cloak x-collapse class="pt-2">
        <form phx-change="Bonfire.Common.Settings:set">
          <Bonfire.UI.Common.SettingsRadiosLive
            keys={[:ui, :infinite_scroll]}
            options={[
              preload: l("Pre-load extra activities, but require clicking on 'Show more' to see them"),
              true: l("Enable doom scrolling"),
              false: "Disable"
            ]}
            default_value={:preload}
            scope={@scope}
          />
        </form>
      </div>
    </div>

    {!-- <div class="p-4 bg-base-content/5 font-bold flex items-center gap-4">
    <#Icon iconify="carbon:notification" class="w-5 h-5 text-base-content/80" />
    <span>{l("Notifications")}</span>
  </div> --}

    <form data-scope="notification_highlight" phx-change="Bonfire.Common.Settings:set">
      <Bonfire.UI.Common.SettingsToggleLive
        show_label={Settings.get([Bonfire.UI.Common.BadgeCounterLive, :highlight], false,
          context: @__context__,
          name: l("Highlight Badge Counters"),
          description: l("Show highlighted badge counters for notifications.")
        ) == true}
        label={l("Dark Pattern")}
        name={l("Highlight notifications indicator")}
        description={l("Use the primary color to highlight the notifications indicator")}
        keys={[Bonfire.UI.Common.BadgeCounterLive, :highlight]}
        scope={@scope}
      />
    </form>

    <form data-scope="show_switch_users_inline" phx-change="Bonfire.Common.Settings:set">
      <Bonfire.UI.Common.SettingsToggleLive
        name={l("Make it easer to switch between profiles")}
        description={l(
          "Show list of profiles directly in the main dropdown menu instead of a separate page. Also includes notifications badges for each profile."
        )}
        keys={[Bonfire.Me.Users, :show_switch_users_inline]}
        scope={@scope}
      />
    </form>

    {!-- <div class="p-4 bg-base-content/5 font-bold flex items-center gap-4">
    <#Icon iconify="material-symbols:add-reaction" class="w-5 h-5 text-base-content/80" />
    <span>{l("Reactions")}</span>
  </div> 

   <form data-scope="set_show_reaction_counts" phx-change="Bonfire.Common.Settings:set">
    <Bonfire.UI.Common.SettingsToggleLive
      show_label={Settings.get([:ui, :show_activity_counts], false, 
        context: @__context__,
        name: l("Show Activity Counts"),
        description: l("Display the number of activities in the UI.")
      ) == true}
      label="Vanity Metric"
      name={l("Show reaction counts (likes / boosts)")}
      description={l(
        "You will see the number of reactions to activities (may not indicate the real amount for federated posts)"
      )}
      keys={[:ui, :show_activity_counts]}
      scope={@scope}
    />
  </form> --}
  </div>

  <div class="p-4 text-xl border-b border-base-content/10 font-bold flex items-center gap-4">
    <#Icon iconify="ic:round-lock" class="w-6 h-6 text-base-content/80" />
    <span>{l("Privacy & Safety")}</span>
  </div>

  <div class="divide-y divide-base-content/10">
    <div
      x-data="{open: false}"
      class="p-4 cursor-pointer"
      :if={@scope != :instance and ActivityPub.Config.federating?() != false}
    >
      <div x-on:click="open = !open" class="flex items-center justify-between gap-4">
        <div class="flex flex-col gap-1">
          <div class="text-sm font-medium">{l("Enable federation?")}</div>
        </div>
        <button type="button" x-cloak class="btn btn-circle btn-sm btn-ghost" x-show="open">
          <#Icon iconify="ph:caret-down-duotone" class="w-3 h-3 text-base-content/70" />
        </button>
        <button type="button" class="btn btn-circle btn-sm btn-ghost" x-show="!open">
          <#Icon iconify="ph:caret-up-duotone" class="w-3 h-3 text-base-content/70" />
        </button>
      </div>
      <div x-show="open" x-cloak x-collapse class="pt-2">
        <form phx-change="Bonfire.Common.Settings:set">
          <input name="scope" value={@scope} type="hidden">
          <div class="divide-y divide-base-content/10">
            <Bonfire.UI.Common.SettingsRadiosLive
              keys={[:activity_pub, :user_federating]}
              options={if ActivityPub.Config.federating?() == nil,
                do: %{
                  "nil" => l("Manual: Enable looking up usernames or fetching individual posts or activities"),
                  "false" => l("Fully disabled")
                },
                else: %{
                  "true" => l("Automatic: Push activities to the fediverse, and accept remote activities"),
                  "nil" => l("Manual: Enable looking up usernames or fetching individual posts or activities"),
                  "false" => l("Fully disabled")
                }}
            />
          </div>
        </form>
      </div>
    </div>

    <form
      class="p-4"
      data-scope="set_dm_privacy"
      name="settings"
      phx-change="Bonfire.Common.Settings:set"
    >
      <Bonfire.UI.Common.SettingsSelectLive
        name={l("Who can reach me by direct message")}
        description={l("Control who's messages to see by default")}
        keys={[Bonfire.Messages, :dm_privacy]}
        options={[
          everyone: l("Everyone"),
          followed_only: l("Only users I follow")
        ]}
        default_value="everyone"
        scope={@scope}
      />
    </form>

    <Bonfire.UI.Me.SettingsViewsLive.DiscoverableLive scope={@scope} />
    <Bonfire.UI.Me.SettingsViewsLive.IndexableLive scope={@scope} />
  </div>

  <div class="p-4 text-xl border-b border-base-content/10 font-bold flex items-center gap-4">
    <#Icon iconify="streamline:trending-content-solid" class="w-6 h-6 text-base-content/80" />
    <span>{l("Curated & Trending topics")}</span>
  </div>

  <div class="divide-y divide-base-content/10">
    <!-- if curated tab is enabled, then show the settings for disabling on the user side -->

    <form class="divide-y divide-base-content/10" phx-change="Bonfire.Common.Settings:set">
      <input name="scope" value={@scope} type="hidden">
      {!-- <Bonfire.UI.Common.SettingsToggleLive
        :if={module_enabled?(Bonfire.Social.Pins, @__context__) and
          Bonfire.Common.Config.get(
            [Bonfire.UI.Social.FeedsLive, :curated],
            false
          )}
        name={l("Activate Curated tab")}
        description={l("By enabling the curated tab it will replace the everything tab in the explore feed")}
        keys={[Bonfire.UI.Social.FeedsLive, :curated]}
        scope={@scope}
      /> --}
      <Bonfire.UI.Common.SettingsToggleLive
        name={l("Hide trending topics")}
        description={l("Do not show a list of trending tags or groups")}
        keys={[:ui, :show_trending_tags, :disabled]}
        scope={@scope}
      />
      <Bonfire.UI.Common.Settings.NumberLive
        scope={@scope}
        name={l("How many days of activity to include when calculating trending topics")}
        keys={[:ui, :show_trending_tags, :for_last_x_days]}
        unit={l("days")}
      />
      <Bonfire.UI.Common.Settings.NumberLive
        scope={@scope}
        name={l("How many trending topics to show")}
        keys={[:ui, :show_trending_tags, :limit]}
        unit={l("topics")}
      />
    </form>
  </div>
</div>