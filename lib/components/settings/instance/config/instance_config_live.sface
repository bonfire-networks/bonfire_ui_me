<div class="p-4">
  {#if Bonfire.Boundaries.can?(@__context__, :describe, :instance)}
    <div class="">
      <StatefulComponent
        module={maybe_component(Bonfire.Files.Web.UploadBannerLive, @__context__)}
        id={:upload_banner}
        object={:instance}
        boundary_verb={:describe}
        src={Bonfire.Common.Settings.get(
          [:bonfire, :ui, :theme, :instance_image],
          "",
          @__context__[:instance_settings] || :instance
        )}
        set_field={[:bonfire, :ui, :theme, :instance_image]}
        set_fn={&Bonfire.Me.Profiles.LiveHandler.set_image_setting/5}
      />
      <div class="flex mx-4 items-center">
        <StatefulComponent
          module={maybe_component(Bonfire.Files.Web.UploadIconLive, @__context__)}
          id={:upload_icon}
          container_class="relative bg-base-100 flex-shrink-0 block w-32 h-32 -mt-16 overflow-hidden rounded-full ring-4 ring-base-300"
          class="inline-block w-32 h-32"
          object={:instance}
          boundary_verb={:describe}
          src={Bonfire.Common.Settings.get(
            [:bonfire, :ui, :theme, :instance_icon],
            "",
            @__context__[:instance_settings] || :instance
          )}
          set_field={[:bonfire, :ui, :theme, :instance_icon]}
          set_fn={&Bonfire.Me.Profiles.LiveHandler.set_image_setting/5}
        />
      </div>
      <form name="settings" phx-submit="Bonfire.Common.Settings:save">
        <input name="scope" value={:instance} type="hidden">

        <fieldset class="fieldset w-full">
          <legend class="fieldset-legend">{l("Site name")}</legend>
          <input
            value={to_string(Config.get([:ui, :theme, :instance_name], Bonfire.Application.name_and_flavour()))}
            name="ui[theme][instance_name]"
            type="text"
            class="input w-full"
            placeholder="Type here"
          />
        </fieldset>

        <fieldset class="fieldset w-full">
          <legend class="fieldset-legend">{l("Site tagline")}</legend>
          <textarea
            value={to_string(Config.get([:ui, :theme, :instance_tagline], nil))}
            name="ui[theme][instance_tagline]"
            class="textarea w-full"
          >{to_string(Config.get([:ui, :theme, :instance_tagline], nil))}</textarea>
          <div class="fieldset-label">{l("A short sentence to outline your site mission.")}</div>
        </fieldset>

        <fieldset class="fieldset w-full">
          <legend class="fieldset-legend">{l("Site description")}</legend>
          <textarea
            value={to_string(Config.get([:ui, :theme, :instance_description], nil))}
            name="ui[theme][instance_description]"
            class="textarea w-full"
          >{to_string(Config.get([:ui, :theme, :instance_description], nil))}</textarea>
          <div class="fieldset-label">{l("Add an optional description to share more details about your site")}</div>
        </fieldset>

        <button type="submit" class="btn mt-4 w-full btn-primary btn-soft">{l("Submit")}</button>
      </form>
    </div>
  {#else}
    {l("You don't have permission to describe the instance, sorry!")}
  {/if}
</div>
{#if Bonfire.Boundaries.can?(@__context__, :configure, :instance)}
  <div class="">
    <div class="p-4 text-xl font-bold flex items-center gap-4 border-b border-base-content/10 text-primary">
      <#Icon iconify="eos-icons:network" class="w-6 h-6 text-primary" />
      <span>{l("Federation & Privacy")}</span>
    </div>

    <form
      class="p-4 border-b border-base-content/10"
      data-scope="set_federation"
      name="settings"
      phx-change="Bonfire.Common.Settings:set"
    >
      <input name="scope" value={:instance} type="hidden">
      <label for="set_federation" class="sr-only">{l("Set Federation")}</label>
      <Bonfire.UI.Common.SettingsSelectLive
        id="set_federation"
        name={l("Federation")}
        description={l(
          "Choose between: Automatic (Push activities to the fediverse and accept remote activities), Manual (Enable looking up usernames and fetching individual posts or activities), Fully disabled"
        )}
        keys={[:activity_pub, :instance, :federating]}
        options={[
          true: l("Automatic"),
          manual: l("Manual"),
          false: l("Fully disabled")
        ]}
        scope={:instance}
      />
    </form>

    <form phx-change="Bonfire.Common.Settings:set">
      <input name="scope" value={:instance} type="hidden">

      <div class="divide-y divide-base-content/10 flex flex-col w-full">
        {!-- <div class="flex flex-col gap-2 p-4">
          <span class="font-medium text-sm">{l("Federation")}</span>

          
          <Bonfire.UI.Common.SettingsRadiosLive
            name={l("Enable federation?")}
            keys={[:activity_pub, :instance, :federating]}
            options={%{
              "true" => l("Automatic: Push activities to the fediverse and accept remote activities"),
              "nil" => l("Manual: Enable looking up usernames and fetching individual posts or activities"),
              "false" => l("Fully disabled")
            }}
            scope={:instance}
          />
        </div> --}
        <Bonfire.UI.Common.SettingsToggleLive
          name={l("Require authentication from federated servers")}
          description={l(
            "Enables stricter enforcement of users' boundaries and blocks, as well as instance-wide blocks. Please note that this may reduce performance, reach, and/or  compatibility with some federated apps. In addition, this does not fully prevent public posts and profiles from being fetched by third parties."
          )}
          keys={[:activity_pub, :reject_unsigned]}
          scope={:instance}
        />

        <Bonfire.UI.Common.SettingsToggleLive
          name={l("Invite-only instance")}
          description={l("Only people with a valid invite link can sign up to this instance.")}
          keys={[:invite_only]}
          scope={:instance}
          default_value
        />
        <div class="flex flex-col gap-2 p-4">
          {!-- <span class="font-medium text-sm">{l("Who can see the list of local users?")}</span>
          <Bonfire.UI.Common.SettingsRadiosLive
            keys={[Bonfire.UI.Me.UsersDirectoryLive, :show_to]}
            options={[guests: l("Guests"), users: l("Users"), admins: l("Admins")]}
            scope={:instance}
          /> 
           description={l("Choose between: Automatic (Push activities to the fediverse and accept remote activities), Manual (Enable looking up usernames and fetching individual posts or activities), Fully disabled")} --}
          <Bonfire.UI.Common.SettingsSelectLive
            name={l("Who can see the list of local users?")}
            keys={[Bonfire.UI.Me.UsersDirectoryLive, :show_to]}
            options={[guests: l("Guests"), users: l("Users"), admins: l("Admins")]}
            scope={:instance}
          />
        </div>

        <div class="p-4">
          <div class="flex items-center justify-between">
            <div class="flex flex-col gap-1">
              <div class="text-sm font-medium">{l("Hide the number of total users on this instance")}</div>
              <div class="text-sm font-light text-base-content/70">{l("Hide the number of total users on this instance")}</div>
            </div>
            <input name="Bonfire.Me.Users[public_count]" value="true" type="hidden">
            <input
              name="Bonfire.Me.Users[public_count]"
              value="false"
              type="checkbox"
              checked={if !Bonfire.Common.Settings.get(
                   [Bonfire.Me.Users, :public_count],
                   true,
                   @__context__[:instance_settings] || :instance
                 ),
                 do: "checked"}
              class="toggle toggle-sm"
            />
          </div>
        </div>
      </div>
    </form>
  </div>

  <div class="">
    <div class="p-4 text-xl font-bold flex items-center gap-4 border-b border-base-content/10 text-primary">
      <#Icon iconify="ph:gear-six-duotone" class="w-6 h-6 text-primary" />
      <span>{l("General Settings")}</span>
    </div>
    <form phx-change="Bonfire.Common.Settings:set" class="divide-y divide-base-content/10">
      <!-- <input name="scope" value={:instance} type="hidden"> -->

      <Bonfire.UI.Common.Settings.NumberLive
        scope={:instance}
        name={l("Maximum number of users per account")}
        keys={[Bonfire.Me.Users, :max_per_account]}
        unit={l("users")}
        default_value={4}
      />

      <Bonfire.UI.Common.Settings.NumberLive
        scope={:instance}
        name={l("Maximum length of text inputs (e.g. posts)")}
        keys={[Bonfire.UI.Common.SmartInputLive, :max_length]}
        unit={l("words")}
        default_value={nil}
      />

      {!-- MAX AMOUNT OF FILES ONE CAN ATTACH TO A POST OR OTHER ACTIVITIES --}
      <Bonfire.UI.Common.Settings.NumberLive
        scope={:instance}
        name={l("Maximum number of files one can attach to a post or other activity")}
        keys={[Bonfire.UI.Common.SmartInputLive, :max_uploads]}
        unit={l("items")}
        default_value={4}
      />

      {!-- <Bonfire.UI.Common.SettingsToggleLive
        name={l("Activate Curated tab")}
        description={l("By enabling the curated tab it will replace the everything tab in the explore feed")}
        keys={[Bonfire.UI.Social.FeedsLive, :curated]}
        scope={:instance}
      /> --}

      <div class="p-4">
        <div class="flex items-center justify-between">
          <div class="flex flex-col gap-1">
            <div class="text-sm font-medium">{l("Show list of admins on public homepage")}</div>
            <div class="text-sm font-light text-base-content/70">{l("Show list of admins on public homepage")}</div>
          </div>
          <input name="Bonfire.UI.Me.WidgetUsersLive[show_guests]" value="false" type="hidden">
          <input
            name="Bonfire.UI.Me.WidgetUsersLive[show_guests]"
            value="true"
            type="checkbox"
            checked={if Bonfire.Common.Settings.get(
                 [Bonfire.UI.Me.WidgetUsersLive, :show_guests],
                 true,
                 @__context__[:instance_settings] || :instance
               ),
               do: "checked"}
            class="toggle toggle-sm"
          />
        </div>
      </div>
    </form>
  </div>

  <div class="">
    <div class="p-4 text-xl font-bold flex items-center gap-4 border-b border-base-content/10 text-primary">
      <#Icon iconify="lucide:server" class="w-6 h-6 text-primary" />
      <span>{l("Resource Usage")}</span>
    </div>
    <form phx-change="Bonfire.Common.Settings:set" class="divide-y divide-base-content/10">
      <Bonfire.UI.Common.Settings.NumberLive
        scope={:instance}
        name={l("Maximum number of items to query in lists")}
        description={l("Please note that a high limit may be desired in order to properly display nested threads")}
        keys={[:pagination_hard_max_limit]}
        unit={l("items")}
      />

      {!-- MAX FILE SIZE --}
      <Bonfire.UI.Common.Settings.NumberLive
        scope={:instance}
        name={l("Maximum file size of uploads attached to a post or other activity")}
        description={l(
          "Please note that a high limit can your instance's impact resource use (and it is recommended to store uploads using an S3-style cloud storage rather than directly on the server file system)."
        )}
        keys={[:bonfire_files, :max_docs_file_size]}
        unit={l("MB")}
      />

      <Bonfire.UI.Common.Settings.NumberLive
        scope={:instance}
        name={l("Maximum file size of uploads like avatars or banners")}
        description={l(
          "Note that they will be automatically resized on the server, so a higher limit here may be reasonable."
        )}
        keys={[:bonfire_files, :max_user_images_file_size]}
        unit={l("MB")}
      />

      <Bonfire.UI.Common.Settings.NumberLive
        scope={:instance}
        name={l("Maximum dimensions when resizing an avatar")}
        keys={[Bonfire.UI.Common.SmartInputLive, :max_dimensions_avatar]}
        unit={l("px")}
      />

      <Bonfire.UI.Common.Settings.NumberLive
        scope={:instance}
        name={l("Maximum dimensions when resizing a banner")}
        keys={[Bonfire.UI.Common.SmartInputLive, :max_dimensions_banner]}
        unit={l("px")}
      />

      <Bonfire.UI.Common.Settings.NumberLive
        scope={:instance}
        name={l("Maximum dimensions when resizing images")}
        keys={[Bonfire.UI.Common.SmartInputLive, :max_dimensions_banner]}
        unit={l("px")}
      />
    </form>
  </div>
  {!-- <div class="!mt-8 m-3 text-xs tracking-wide uppercase text-base-content/70 font-medium">{l("Advanced settings")}</div> --}

  <div class="">
    <div class="p-4 text-xl font-bold flex items-center gap-4 border-b border-base-content/10 text-primary">
      <#Icon iconify="ri:mail-send-line" class="w-6 h-6 text-primary" />
      <span>{l("Email Configuration")}</span>
    </div>

    <div class="divide-y divide-base-content/10 flex flex-col">
      <form phx-change="Bonfire.Common.Settings:set" class="p-4">
        <input name="scope" value={:instance} type="hidden">
        <Bonfire.UI.Common.SettingsSelectLive
          name={l("Email Backend")}
          description={l("Select which service to use for sending emails")}
          keys={[:bonfire_mailer, :mail_backend]}
          options={[
            smtp: l("SMTP"),
            mailgun: l("Mailgun"),
            sendgrid: l("SendGrid"),
            none: l("Disabled")
          ]}
          scope={:instance}
        />
      </form>

      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("Mail API Key")}
          description={l("API key for your email service provider")}
          keys={[:bonfire_mailer, :mail_key]}
          default_value={System.get_env("MAIL_KEY")}
          placeholder="your-api-key-here"
        />
      </div>
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("Mail From Address")}
          description={l("Email address that will appear as sender")}
          keys={[:bonfire_mailer, :mail_from]}
          default_value={System.get_env("MAIL_FROM")}
          placeholder="noreply@example.com"
        />
      </div>
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("Mail Domain")}
          description={l("Your email domain")}
          keys={[:bonfire_mailer, :mail_domain]}
          default_value={System.get_env("MAIL_DOMAIN")}
          placeholder="example.com"
        />
      </div>
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("Mail Base URI")}
          description={l("Base URI for mail service API (if applicable)")}
          keys={[:bonfire_mailer, :mail_base_uri]}
          default_value={System.get_env("MAIL_BASE_URI")}
          placeholder="https://api.mailgun.net/v3"
        />
      </div>
    </div>
  </div>

  <div class="">
    <div class="p-4 text-xl font-bold flex items-center gap-4 border-b border-base-content/10 text-primary">
      <#Icon iconify="mdi:cloud-search" class="w-6 h-6 text-primary" />
      <span>{l("Search Configuration")}</span>
    </div>
    <div class="divide-y divide-base-content/10">
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("Meilisearch Instance URL")}
          description={l("URL of your Meilisearch server")}
          keys={[:bonfire_search, :instance]}
          placeholder="http://localhost:7700"
        />
      </div>
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("Meilisearch Master Key")}
          description={l("Master key for Meilisearch authentication")}
          keys={[:bonfire_search, :api_key]}
          placeholder="your-master-key"
        />
      </div>
    </div>
  </div>

  <div class="">
    <div class="p-4 text-xl font-bold flex items-center gap-4 border-b border-base-content/10 text-primary">
      <#Icon iconify="carbon:cloud-upload" class="w-6 h-6 text-primary" />
      <span>{l("File Storage (S3)")}</span>
    </div>
    <div class="divide-y divide-base-content/10">
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("S3 Bucket Name")}
          description={l("Name of your S3 bucket for file uploads")}
          keys={[:bonfire_files, :uploads_s3_bucket]}
          default_value={System.get_env("UPLOADS_S3_BUCKET")}
          placeholder="my-bonfire-uploads"
        />
      </div>
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("S3 Access Key ID")}
          description={l("AWS/S3 access key ID")}
          keys={[:bonfire_files, :uploads_s3_access_key_id]}
          default_value={System.get_env("UPLOADS_S3_ACCESS_KEY_ID")}
          placeholder="AKIAIOSFODNN7EXAMPLE"
        />
      </div>
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("S3 Secret Access Key")}
          description={l("AWS/S3 secret access key")}
          keys={[:bonfire_files, :uploads_s3_secret_access_key]}
          default_value={System.get_env("UPLOADS_S3_SECRET_ACCESS_KEY")}
          placeholder="wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
        />
      </div>
    </div>
  </div>

  <div class="">
    <div class="p-4 text-xl font-bold flex items-center gap-4 border-b border-base-content/10 text-primary">
      <#Icon iconify="ph:heartbeat-duotone" class="w-6 h-6 text-primary" />
      <span>{l("Telemetry & Monitoring")}</span>
    </div>

    <div class="divide-y divide-base-content/10 flex flex-col">
      <form phx-change="Bonfire.Common.Settings:set" class="">
        <input name="scope" value={:instance} type="hidden">

        <Bonfire.UI.Common.SettingsToggleLive
          name={l("Enable OpenTelemetry")}
          description={l("Enable telemetry data collection and export")}
          keys={[:opentelemetry, :enabled]}
          scope={:instance}
        />
      </form>
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("Sentry DSN")}
          description={l("Sentry DSN for error tracking and reporting")}
          keys={[:sentry, :dsn]}
          default_value={System.get_env("SENTRY_DSN")}
          placeholder="https://public@sentry.example.com/1"
        />
      </div>
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("Honeycomb API Key")}
          description={l("API key for Honeycomb.io telemetry")}
          keys={[:opentelemetry, :honeycomb_api_key]}
          default_value={System.get_env("OTEL_HONEYCOMB_API_KEY")}
          placeholder="your-honeycomb-api-key"
        />
      </div>
      <div class="p-4">
        <Bonfire.UI.Common.SettingsInputLive
          scope={:instance}
          name={l("Lightstep API Key")}
          description={l("API key for Lightstep/ServiceNow telemetry")}
          keys={[:opentelemetry, :lightstep_api_key]}
          default_value={System.get_env("OTEL_LIGHTSTEP_API_KEY")}
          placeholder="your-lightstep-api-key"
        />
      </div>
    </div>
  </div>
{#else}
  {l("You don't have permission to configure the instance, sorry!")}
{/if}
