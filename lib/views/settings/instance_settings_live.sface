{!-- <div class="grid gap-8 grid-cols-[280px_1fr]">
  <div class="sticky top-[56px] -ml-4 overflow-y-auto border-r bg-base-200 widget border-base-content/10">
    <nav class="" role="navigation" aria-label={l("Instance  navigation")}>
      <Bonfire.UI.Me.InstanceSidebarSettingsNavLive selected_tab={@selected_tab} />
    </nav>
  </div> --}
<section class="bg-base-100">
  {#case @selected_tab}
    {#match "dashboard"}
      <Bonfire.UI.Me.SettingsViewsLive.InstanceDashboardLive selected_tab={@selected_tab} />
    {#match "admins"}
      <StatefulComponent
        :if={current_user(@__context__)}
        module={maybe_component(Bonfire.UI.Boundaries.CircleMembersLive, @__context__)}
        selected_tab={@selected_tab}
        id="admin_circle"
        show_add={maybe_apply(Bonfire.Me.Accounts, :is_admin?, [@__context__], fallback_return: nil) == true}
        description={l(
          "Admins have full control over the instance, including managing users, roles, content, and settings."
        )}
        scope={@scope}
        circle_id={maybe_apply(Bonfire.Boundaries.Scaffold.Instance, :admin_circle, [])}
      />
    {#match "mods"}
      <StatefulComponent
        :if={current_user(@__context__)}
        module={maybe_component(Bonfire.UI.Boundaries.CircleMembersLive, @__context__)}
        selected_tab={@selected_tab}
        id="mod_circle"
        scope={@scope}
        description={l(
          "Moderators help maintain a safe and welcoming community by managing content and user behavior."
        )}
        show_add={maybe_apply(Bonfire.Me.Accounts, :is_admin?, [@__context__], fallback_return: nil) == true}
        circle_id={maybe_apply(Bonfire.Boundaries.Scaffold.Instance, :mod_circle, [])}
      />
    {#match "remote_allow_list"}
      <StatefulComponent
        :if={current_user(@__context__)}
        module={maybe_component(Bonfire.UI.Boundaries.CircleMembersLive, @__context__)}
        selected_tab={@selected_tab}
        id="remote_allow_list_circle"
        scope={@scope}
        read_only
        circle_id={maybe_apply(Bonfire.Boundaries.Scaffold.Instance, :activity_pub_circle, [])}
      />
      <!-- show_add={Bonfire.Boundaries.can?(@__context__, :grant, :instance)}
        show_remove={Bonfire.Boundaries.can?(@__context__, :grant, :instance)} -->
    {#match "about"}
      <Bonfire.UI.Me.SettingsViewsLive.InstanceAboutLive selected_tab={@selected_tab} />
    {#match "configuration"}
      <Bonfire.UI.Me.SettingsViewsLive.InstanceConfigLive selected_tab={@selected_tab} />
    {#match "preferences"}
      <Bonfire.UI.Me.SettingsViewsLive.PreferencesLive
        selected_tab={@selected_tab}
        id={@id}
        scope={:instance}
      />
      {!-- {#match "navigation"}
        <Bonfire.UI.Me.SettingsViewsLive.InstanceNavigationLive selected_tab={@selected_tab} /> --}
    {#match "extensions"}
      <Bonfire.UI.Common.ExtensionsLive id="extensions" scope={:instance} />
    {#match "flags"}
      <StatefulComponent
        module={maybe_component(Bonfire.UI.Moderation.FlagsLive, @__context__)}
        id="flags"
        selected_tab={@selected_tab}
        scope={:instance}
      />
    {#match "silenced"}
      <StatefulComponent
        module={maybe_component(Bonfire.UI.Boundaries.BlocksLive, @__context__)}
        id="blocks"
        selected_tab="silenced"
        title={l("Silenced Users")}
        description={l(
          "Silenced users and instances are hidden from your feeds and notifications. You won't see their posts, mentions, or messages, but they can still see your public content."
        )}
      />
    {#match "ghosted"}
      <StatefulComponent
        module={maybe_component(Bonfire.UI.Boundaries.BlocksLive, @__context__)}
        id="blocks"
        selected_tab="ghosted"
        title={l("Ghosted Users")}
        description={l(
          "Ghosted users and instances cannot see or interact with you or your content. This is a stronger form of blocking where they are completely invisible to each other."
        )}
      />
    {#match "blocks_import"}
      <StatefulComponent
        module={maybe_component(Bonfire.UI.Social.ImportLive, @__context__)}
        selected_tab={@selected_tab}
        type={:blocks}
        scope={:instance_wide}
        id="import"
      />
    {#match "blocks_export"}
      <StatelessComponent
        module={maybe_component(Bonfire.UI.Social.InstanceExportLive, @__context__)}
        selected_tab={@selected_tab}
        scope={:instance_wide}
        id="export"
      />
    {#match "terms"}
      <Bonfire.UI.Me.SettingsViewsLive.TermsLive selected_tab={@selected_tab} />
    {#match "invites"}
      <StatefulComponent
        module={maybe_component(Bonfire.Invite.Links.Web.InvitesLive, @__context__)}
        id="admin_invites"
        selected_tab={@selected_tab}
      />
    {#match "posts"}
      <Bonfire.UI.Me.SettingsViewsLive.InstancePostsLive
        id={:instance_posts}
        selected_tab={@selected_tab}
      />
      {!-- {#match "flags"}
        <Bonfire.UI.Me.SettingsViewsLive.AdminReportsLive
          
        /> --}

      <!-- {#match "team"}
    <div class="p-3">
      <div class="border border-base-content/30 rounded-box p-3">
        <span class="font-bold">Admins</span>
        </div>
      <div class="border mt-3 border-base-content/30 rounded-box p-3">
        <span class="font-bold">Moderators</span>

      </div>

    </div> -->
    {#match "members"}
      <Bonfire.UI.Me.SettingsViewsLive.InstanceMembersLive
        id="instance_members"
        title={l("Local Members")}
      />
    {#match "remote_users"}
      <Bonfire.UI.Me.SettingsViewsLive.InstanceMembersLive
        id="remote_users"
        show={:remote}
        title={l("Remote Users")}
      />
    {#match "remote_instances"}
      <Bonfire.UI.Me.SettingsViewsLive.InstancesLive
        id="remote_instances"
        title={l("Remote Instances")}
      />

      {!-- {#match "instance_silenced"}
      <StatefulComponent
        module={maybe_component(Bonfire.UI.Boundaries.BlocksLive, @__context__)}
        scope={:instance_wide} id="blocks" selected_tab="silenced" name={l "Ghosted instance-wide"} />
    {#match "instance_ghosted"}
      <StatefulComponent
        module={maybe_component(Bonfire.UI.Boundaries.BlocksLive, @__context__)}
        scope={:instance_wide} id="blocks" selected_tab="ghosted" name={l "Silenced instance-wide"} /> --}
    {#match "shared_user"}
      <Bonfire.UI.Me.SettingsViewsLive.SharedUserLive
        current_user={current_user(@__context__) |> repo().maybe_preload(:shared_user)}
        selected_tab={@selected_tab}
      />
      {!-- {#match "instance_circles"}
      <StatefulComponent
        module={maybe_component(Bonfire.UI.Boundaries.MyCirclesLive, @__context__) and current_user(@__context__)}
        id="circles"
        scope={:instance}
      />
    {#match "instance_acls"}
      <StatefulComponent
        module={maybe_component(Bonfire.UI.Boundaries.MyAclsLive, @__context__) and current_user(@__context__)}
        selected_tab="acls"
        id="my_acls"
        scope={:instance}
      /> --}
    {#match "crawler_boundaries"}
      <StatefulComponent
        module={maybe_component(Bonfire.UI.Common.CrawlerBoundaries.SettingsLive, @__context__)}
        id="crawler_boundaries"
        selected_tab={@selected_tab}
        scope={@scope}
      />
    {#match "code"}
      <Bonfire.UI.Common.ExtraDepsLive />
    {#match "config_settings_registry"}
      <Bonfire.UI.Common.ConfigSettingsRegistryLive id="config_settings_registry" scope={:instance} />
    {#match "icons"}
      <Bonfire.UI.Common.SettingsViewsLive.IconsLive selected_tab={@selected_tab} />
    {#match "emojis"}
      <StatefulComponent
        module={maybe_component(Bonfire.Files.Web.UploadEmojiLive, @__context__)}
        id="custom_emojis"
        scope={:instance}
        description={l("You can define custom emoji for all users on this instance.")}
      />
    {#match _}
      {#case maybe_to_atom!(@selected_tab)}
        {#match nil}
          <Bonfire.UI.Me.SettingsViewsLive.InstanceConfigLive selected_tab={@selected_tab} />
        {#match extension}
          <Bonfire.UI.Me.ExtensionSettingsLive
            id="extension_settings"
            extension={extension}
            scope={:instance}
          />
      {/case}
  {/case}
</section>
{!-- </div> --}
