<div class="w-full" id="signup">
  <Bonfire.UI.Common.LogoLinkLive
    container_class=""
    image_class="mt-12 mb-6 mx-auto w-12 h-12 bg-center bg-no-repeat bg-cover"
    with_name={false}
    href="/"
  />

  {#if @registered}
    <div class="w-full mx-auto rounded-md shadow bg-base-100">
      <div class="p-3">
        <div class="p-4 rounded-md bg-success/10">
          <div class="flex">
            <div class="flex-shrink-0">
              <Icon solid="CheckCircle" class="w-5 h-5 text-success" />
            </div>
            <div class="flex-col flex-1 ml-3 md:flex md:justify-between">
              <h3 class="text-sm font-medium text-success">{l("Hooray! You are registered")}</h3>
              <div class="mt-2 text-sm text-success/80" data-id="confirmation_success">
                {#if @registered == :check_email}
                  {l(
                    "Now we need you to confirm your email address. We've emailed you a link (check your spam folder!). Please click on it to continue."
                  )}
                {#else}
                  {l("You can now log in.")}
                {/if}
              </div>
              <LiveRedirect class="mt-3 font-bold link link-sm text-success" to={path(Config.get!(:home_page))}>
                {l("Back to home page")}
              </LiveRedirect>
            </div>
          </div>
        </div>
      </div>
    </div>
  {#else}
    {#if Bonfire.Me.Accounts.instance_is_invite_only?() && !@invite}
      <div role="status" class="my-4 alert alert-warning">
        <div class="flex">
          <div class="whitespace-normal">
            {l("This instance is currently invite-only.")}
          </div>
        </div>
      </div>
    {#else}
      <div class="rounded-md shadow bg-base-100" x-data="{ active: 1 }">
        {#case Config.get([:bonfire, :terms, :conduct], nil)}
          {#match terms when is_binary(terms)}
            <div
              x-data="{
        id: 1,
        get expanded() {
            return this.active === this.id
        },
        set expanded(value) {
            this.active = value ? this.id : null
        },
      }"
              role="region"
              class="border-b bg-base-200 border-base-content/10"
            >
              <button
                x-on:click="expanded = !expanded"
                :aria-expanded="expanded"
                class="flex items-center justify-between w-full px-6 py-2 text-lg font-bold"
              >
                <span>{l("Read our code of conduct")}</span>
                <span x-show="expanded" aria-hidden="true" class="ml-4">&minus;</span>
                <span x-show="!expanded" aria-hidden="true" class="ml-4">&plus;</span>
              </button>

              <div x-show="expanded" x-collapse>
                <div class="px-6 pb-4">
                  <div class="prose">
                    {templated_or_remote_markdown(terms)}
                  </div>
                </div>
              </div>
            </div>
          {#match _}
        {/case}

        {#case Config.get([:bonfire, :terms, :privacy], nil)}
          {#match terms when is_binary(terms)}
            <div
              x-data="{
        id: 2,
        get expanded() {
            return this.active === this.id
        },
        set expanded(value) {
            this.active = value ? this.id : null
        },
      }"
              role="region"
              class="border-b bg-base-200 border-base-content/10"
            >
              <h2>
                <button
                  x-on:click="expanded = !expanded"
                  :aria-expanded="expanded"
                  class="flex items-center justify-between w-full px-6 py-2 text-lg font-bold"
                >
                  <span>{l("Read our privacy policy")}</span>
                  <span x-show="expanded" aria-hidden="true" class="ml-4">&minus;</span>
                  <span x-show="!expanded" aria-hidden="true" class="ml-4">&plus;</span>
                </button>
              </h2>

              <div x-show="expanded" x-collapse>
                <div class="px-6 pb-4">
                  {templated_or_remote_markdown(terms)}
                </div>
              </div>
            </div>
          {#match _}
        {/case}
      </div>

      <div class="flex m-3 mb-3 md:m-0">
        <Bonfire.UI.Me.SignupFormLive
          form={@form}
          error={@error}
          auth_second_factor_secret={@auth_second_factor_secret}
        />
      </div>
    {/if}
  {/if}
</div>
